C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE ZHU
OBJECT MODULE PLACED IN zhu.OBJ
COMPILER INVOKED BY: C:\D\Keil\C51\BIN\C51.EXE zhu.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1                  #include<reg51.h>
   2          #define uchar unsigned char
   3          #define uint unsigned int
   4          sfr Seg=0x80;//将0x80的地址映射到名为Seg的特殊功能寄存器，用于控制数码管的段选信号
   5          sfr Motor=0xa0;//寄存器用于控制电机的运行
   6          sfr Signal=0xb0;//用于接收外部发送的信号，仅使用了低四位
   7          sbit Opendoor=P1^0;//请求开门 0有效
   8          sbit Closedoor=P1^1;//请求关门，0有效
   9          sbit Warning=P1^2;//报警,0表示报警(检测其他类型报警)
  10          sbit Up=P1^3;//上行指示灯
  11          sbit Down=P1^4;//下行指示灯
  12          sbit Switch=P1^5;//表示电梯是否正常运行，在电路中我们用1表示电梯正常运行，0表示故障
  13          sbit Overweight=P1^6;//超重信号由p1.6控制，0表示超重（检测超重报警）
  14          sbit beep=P1^7;//蜂鸣器
  15          
  16          char Floor_show[]={0xff,0xf9,0xa4,0xb0,0x99,0x92};//定义数码管的显示，表示楼层从1-5，Floor[0]表示
  17          char Door1[4]={0x40,0x80,0x10,0x20};//门系统的四相四拍工作方式，反转（暂时还不知道怎么来的）
  18          char Door2[4]={0x20,0x10,0x80,0x40};//正转，开门
  19          char Hoist1[4]={0x04,0x08,0x01,0x02};//起重机四相四拍工作方式,反转下行
  20          char Hoist2[4]={0x02,0x01,0x08,0x04};//正转，上行
  21          char Location=1;//表示电梯所在的楼层
  22          char Way=0;//表示电梯运行方向 0 4
  23          char Layer=0;//表示电梯需要移动的楼层数，在实际应用中这种设置完全没有必要，在这里这样设置是为了后面计算
  24          char Doorstatus=0;//表示电梯门的状态，0表示电梯门关着，1表示电梯门开着
  25          char Zhusendarray[2]={0x0f};//  因初始状态Way=0 Location=1，所以为0x0f 
  26          char Zhuacceptarray[]={0xFf};//临时存储接收到的信号值,初始化成1111 1111
  27          char Lampcontrolarray[]={0x0f,0x1f,0x2f,0x3f,0xcf,0xbf,0xaf,0x9f};//灯显示状态信号（楼层和上下行显示）
  28          char HoistControlArray[]={0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff}
             -;
  29          void Zhu_requestsend();
  30          void Zhu_status();
  31          
  32          /*延时函数实现*/
  33          void Delay(uint type)//写这么多的延时函数是为了下面起重机加速减速坐准备
  34          {
  35   1          unsigned char a, b, c;
  36   1          switch (type)
  37   1          {
  38   2              case 1: // 1ms延时
  39   2                  c = 10;
  40   2                  b = 42;
  41   2                  a = 2;
  42   2                  break;
  43   2              case 2: // 100ms延时
  44   2                  c = 19;
  45   2                  b = 20;
  46   2                  a = 130;
  47   2                  break;
  48   2              case 3: // 62.5ms延时
  49   2                  b = 224;
  50   2                  a = 138;
  51   2                  break;
  52   2              case 4: // 31.25ms延时
  53   2                  c = 2;
  54   2                  b = 220;
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 2   

  55   2                  a = 34;
  56   2                  break;
  57   2              case 5: // 20.825ms延时
  58   2                  b = 58;
  59   2                  a = 178;
  60   2                  break;
  61   2              case 6: // 300ms延时
  62   2                  c = 5;
  63   2                  b = 212;
  64   2                  a = 140;
  65   2                  break;
  66   2              case 7: // 2s延时
  67   2                  c = 127;
  68   2                  b = 235;
  69   2                  a = 32;
  70   2                  break;
  71   2              default:
  72   2                  // 默认为1ms延时
  73   2                  c = 10;
  74   2                  b = 42;
  75   2                  a = 2;
  76   2                  break;
  77   2          }
  78   1      
  79   1          if (type != 3&&type != 5) 
  80   1          {
  81   2              for (; c > 0; c--)
  82   2              {
  83   3                  for (; b > 0; b--)
  84   3                  {
  85   4                      for (; a > 0; a--)
  86   4                      {
  87   5                          // 延时实现
  88   5                      }
  89   4                  }
  90   3              }
  91   2          }
  92   1          else // 单独处理62.5ms延时
  93   1          {
  94   2              for (; b > 0; b--)
  95   2              {
  96   3                  for (; a > 0; a--)
  97   3                  {
  98   4                      // 延时实现
  99   4                  }
 100   3              }
 101   2          }
 102   1      }
 103          
 104          
 105          /*Switch开关检测子程序*/
 106          void Switch_judge()
 107          {
 108   1      while(1)
 109   1          {
 110   2               if(Switch==0)//如果被按下那么即可跳出循环，否则就一直检测端口
 111   2                   break;
 112   2                }
 113   1      }
 114          
 115          
 116          
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 3   

 117          
 118          
 119          /*超重报警子函数*/
 120          void Over_weight()
 121          {
 122   1              if(Overweight==0)//在此处将低电平表示超重
 123   1              {
 124   2                      beep=~beep;
 125   2                      Delay(1);
 126   2              }
 127   1      }
 128          
 129          
 130          
 131          
 132          /*电梯(起重机)加速或者减速运行子程序*/
 133          void Hoist_speed1(char Way)                                      //电机0m/s--0.5m/s间 加速或减速行驶子程序（加速度 0.75）
 134          {
 135   1      char time,rotate;
 136   1              if(Warning==0)//根据电路图分析低电平时警报产生
 137   1                 {
 138   2                      Switch=1;
 139   2                        while(1)
 140   2                          {
 141   3                           beep=~beep;
 142   3                       Delay(1);
 143   3                          }
 144   2                 }
 145   1      switch(Way)
 146   1          {                                                    // Way:正反转判断      0 正传，否则 反转
 147   2          case 0:
 148   2                   {
 149   3               for(time=0;time<2;time++)
 150   3                   for(rotate=0;rotate<4;rotate++)
 151   3                     {
 152   4                                  Motor=Hoist2[rotate];
 153   4                            Delay(3);                  
 154   4                           }
 155   3                   break;
 156   3                   }
 157   2                default :
 158   2                   {
 159   3                   for(time=0;time<2;time++)
 160   3                   for(rotate=0;rotate<4;rotate++)
 161   3                       {
 162   4                                  Motor=Hoist1[rotate];
 163   4                            Delay(3); 
 164   4                           }
 165   3                   }
 166   2          }
 167   1      }
 168          
 169          void Hoist_speed2(char Way)// 电机 0.5m/s--1.0m/s间 加速或减速行驶子程序（加速度 0.75）
 170          {
 171   1      char time,rotate;
 172   1              if(Warning==0)
 173   1                 {
 174   2                      Switch=1;
 175   2                      while(1)
 176   2                          {
 177   3                           beep=~beep;
 178   3                      Delay(1);
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 4   

 179   3                          }
 180   2                 } 
 181   1      switch(Way)
 182   1          {
 183   2          case 0://Way0电机正转，电梯上升
 184   2                   {
 185   3               for(time=0;time<4;time++)
 186   3                   for(rotate=0;rotate<4;rotate++)
 187   3                   {
 188   4                               Motor=Hoist2[rotate];
 189   4                           Delay(4);                           
 190   4                       }
 191   3                       break;
 192   3                   }
 193   2          default:
 194   2                   {
 195   3               for(time=0;time<4;time++)
 196   3                   for(rotate=0;rotate<4;rotate++)
 197   3                   {
 198   4                     Motor=Hoist1[rotate];
 199   4                           Delay(4);           
 200   4                       }
 201   3                   }
 202   2          }
 203   1      }
 204          void Hoist_speed3(char Way)//电机 1.0m/s--1.5m/s间 加速或减速行驶子程序（加速度 0.75）
 205          {
 206   1      char time,rotate;
 207   1              if(Warning==0)
 208   1                 {
 209   2                      Switch=1;
 210   2                        while(1)
 211   2                          {
 212   3                           beep=~beep;
 213   3                     Delay(1);
 214   3                          }
 215   2                 }
 216   1      switch(Way)
 217   1          {
 218   2          case 0:
 219   2                   { 
 220   3                    for(time=0;time<6;time++)
 221   3                        for(rotate=0;rotate<4;rotate++)
 222   3                        {
 223   4                                    Motor=Hoist2[rotate];
 224   4                                Delay(5);
 225   4                            }
 226   3                       break;
 227   3                       }
 228   2          default:
 229   2                   { 
 230   3                    for(time=0;time<6;time++)
 231   3                        for(rotate=0;rotate<4;rotate++)
 232   3                        {
 233   4                                    Motor=Hoist1[rotate];
 234   4                                Delay(5);
 235   4                            }
 236   3                       }
 237   2          }
 238   1      }
 239          //0.75s
 240          void Hoist_speed4(char Way,char one,char two )// 1.5m/s 匀速行驶子程序（加速度 0）（注：此为0.5s的匀速行驶
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 5   

             -）
 241          {
 242   1      char time,rotate;
 243   1              if(Warning==0)
 244   1                 {
 245   2                      Switch=1;
 246   2                        while(1)
 247   2                          {
 248   3                           beep=~beep;
 249   3                     Delay(1);
 250   3                          }
 251   2                 }
 252   1      switch(Way)
 253   1          {
 254   2      
 255   2          case 0:
 256   2                   { 
 257   3                    for(time=0;time<6;time++)
 258   3                        for(rotate=0;rotate<4;rotate++)
 259   3                        {
 260   4                                      Motor=Hoist2[rotate];
 261   4                                Delay(5);
 262   4                                                if(Layer!=1 && two==1 && one==3 && time*rotate==12 )            //桥厢位置确定
 263   4                                                    {
 264   5                                                    Seg=Floor_show[++Location];//此处Flow_show表示数码管显示段码
 265   5                                                          one=0;
 266   5                                                          two=0;
 267   5      
 268   5                                                        }     
 269   4                            }
 270   3                       break;
 271   3                       }
 272   2          default:
 273   2                   { 
 274   3                    for(time=0;time<6;time++)
 275   3                        for(rotate=0;rotate<4;rotate++)
 276   3                        {
 277   4                                      Motor=Hoist1[rotate];
 278   4                                Delay(5);
 279   4                                                if(Layer!=1 && two==1 && one==3 && time*rotate==12 )
 280   4                                                    {
 281   5                                                    Seg=Floor_show[--Location];
 282   5                                                          one=0;
 283   5                                                          two=0;
 284   5      
 285   5                                                        }     
 286   4                            }
 287   3                       }
 288   2          }
 289   1      }
 290          /*电梯上下行指示灯亮灭子程序*/
 291          void Lamp_of_updown()
 292          {
 293   1              if(Way==0&Layer!=0)//Way=0时表示上行Way=4时表示下行（不用0和1也是为了下面的技术实现）
 294   1              {
 295   2                      Up=1;//高电平有效
 296   2                      Down=0;
 297   2              }
 298   1              else if(Way==4&Layer!=0)
 299   1              {
 300   2                      Up=0;
 301   2                      Down=1;
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 6   

 302   2              }
 303   1              else if(Layer==0)//这种情况就是电梯门打开但是不想乘坐了所以既不上行也不下行
 304   1              {
 305   2                      Up=0;
 306   2                      Down=0;
 307   2              }
 308   1      }
 309          
 310          /*确定Layer和Way子程序*/
 311          void Judge()
 312          {
 313   1              switch(Zhuacceptarray[0]<<4)//根据接收到的请求信号,计算出电梯需要移动的楼层数(Layer)和移动方向(Way)
 314   1              {
 315   2                      case 0x00://计算出Layer和Way的值位后续的电机控制和指示灯控制提供依据
 316   2                      {
 317   3                              if((Layer=Location-1)>0) Way=4;
 318   3                              else Way=0;
 319   3                              break;
 320   3                      }
 321   2                      case 0x10:
 322   2                      {
 323   3                              if((Layer=Location-2)>0) Way=4;
 324   3                              else {Layer=2-Location;Way=0;}
 325   3                              break;
 326   3                      }
 327   2                      case 0x20:
 328   2                {
 329   3                      if((Layer=Location-3)>0) Way=4;
 330   3                      else {Layer=3-Location;Way=0;}
 331   3                      break;
 332   3                      }
 333   2                case 0x30:
 334   2                {
 335   3                      if((Layer=Location-4)>0) Way=4;
 336   3                      else {Layer=4-Location;Way=0;}
 337   3                      break;
 338   3                      }
 339   2                case 0x40:
 340   2                {
 341   3                      if((Layer=5-Location)>0) Way=0;
 342   3                      else Way=4;
 343   3                      break;
 344   3                      }
 345   2          case 0x50:
 346   2                {
 347   3                      if((Layer=4-Location)>0) Way=0;
 348   3                      else {Layer=Location-4;Way=4;}
 349   3                      break;
 350   3                      }
 351   2                case 0x60:
 352   2                {
 353   3                      if((Layer=3-Location)>0) Way=0;
 354   3                      else {Layer=Location-3;Way=4;}
 355   3                      break;
 356   3                      }
 357   2                case 0x70:
 358   2                {
 359   3                      if((Layer=2-Location)>0) Way=0;
 360   3                      else {Layer=Location-2;Way=4;}
 361   3                      break;
 362   3                      }
 363   2                case 0x80:
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 7   

 364   2                  {
 365   3                         Layer=0;
 366   3                              }
 367   2              }
 368   1      }
 369          
 370          /*电梯到达蜂鸣子程序*/
 371          void Arrive_sound()//电梯到达子程序，当电梯到达乘客指定楼层后，蜂鸣器发出声音提示乘客到达
 372          {
 373   1              unsigned char a,b,c;
 374   1              for(c=3;c>0;c--)
 375   1                  for(b=2;b>0;b--)
 376   1                      for(a=10;a>0;a--)
 377   1              
 378   1                                              {   
 379   2                                               beep=~beep;
 380   2                                       Delay(1);
 381   2                                              }                        
 382   1      }
 383          /*起重电机控制子程序（需要调用上面创建的加速减速匀速程序来实现）*/
 384          void Hoist()
 385          {
 386   1              char i;//匀速阶段子程序循环次数
 387   1              char One=0, Two=1;
 388   1              Lamp_of_updown();//电梯上下行指示灯
 389   1              Hoist_speed1(Way);//无论上行几层还是下行几层，首先经历的一定是加速过程
 390   1              Hoist_speed2(Way);//总的加速减速阶段
 391   1              Hoist_speed3(Way);
 392   1              //匀速过程
 393   1        for(i=0;i<3+6*(Layer-1);i++)
 394   1              {
 395   2                      Hoist_speed4(Way,One,Two);
 396   2                      One++;
 397   2                      if(i%3==0)//每当电梯匀速运行1.5s重新扫描引脚状态
 398   2                      {
 399   3                              if((Signal<<4)^(Zhuacceptarray[0]<<4))//如果发生变化就进行更改
 400   3                              {
 401   4                                      Zhuacceptarray[0]=Signal;
 402   4                                      Judge();
 403   4                              }
 404   3                              if(i!=3&&(i-3)%6==0)
 405   3                              {
 406   4                                      Two=1;
 407   4                                      One=3;
 408   4                              }
 409   3                      }
 410   2              }
 411   1              Hoist_speed3(Way);//实现减速过程
 412   1              Hoist_speed2(Way);
 413   1              Hoist_speed1(Way);
 414   1              Switch_judge();//判断电梯能否正常运行
 415   1              Arrive_sound();//电梯门到达蜂鸣器
 416   1              Zhu_status();
 417   1              if(Way==0)
 418   1              
 419   1                      Seg=Floor_show[++Location];//改变Location的值并传到寄存器Seg中
 420   1              else
 421   1                      Seg=Floor_show[--Location];
 422   1      }
 423          /*电梯门打开函数实现*/
 424          void Door_open()//电梯门的开启和关闭是通过一个电机驱动的,电机会以四相四拍的方式工作,每次转动 90 度。这样可
             -以实现电梯门的缓慢开合。
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 8   

 425          {
 426   1              char a;
 427   1              for(a=0;a<8;a++)
 428   1       {
 429   2              Motor=Door2[a%4];//四次循环逐步将电梯门打开
 430   2              Delay(6);//延时300ms
 431   2              
 432   2       }
 433   1      }
 434          /*电梯门关闭函数实现*/
 435          void Door_close()
 436          {
 437   1              char a;
 438   1              if(Doorstatus==1)
 439   1              {
 440   2                      for(a=0;a<8;a++)
 441   2              {
 442   3                      Motor=Door1[a%4];
 443   3                      Delay(6);//延时300ms
 444   3              }
 445   2              }
 446   1              
 447   1      }
 448          
 449          
 450          /*电梯内部请求实现*/
 451          void Indoor_requst(char a)//a为请求的次数,主要是来设置时间，这个时间用来检测各种引脚的状态，
 452          {                               //在实际中就是电梯门开启时间间隔
 453   1              char b;
 454   1              for(b=0;b<a;b++)
 455   1              {
 456   2                      //检测超重报警
 457   2                      Over_weight();
 458   2                      //检测其他类型报警
 459   2                      if(Warning==0)
 460   2                      {
 461   3                              Switch=1;
 462   3                              while(1)
 463   3                              {
 464   4                                      beep=~beep;//并报警
 465   4                                      Delay(1);
 466   4                              }
 467   3                      }
 468   2                      if(Opendoor==0&&Doorstatus==1)//有开门请求并且门处于开状态
 469   2                      {
 470   3                              Signal=0x4f;//修改Signal
 471   3                      }
 472   2                      if(Closedoor==0&&Doorstatus==0)//有关门请求且门已经处于关闭状态
 473   2                      {Signal=0x5f;}
 474   2                      if(Opendoor==0&&Doorstatus==0)//有开门请求但是门门处于关闭状态
 475   2                      {
 476   3                              Door_open();//先将门打开
 477   3                              Signal=0x4f;//然会再修改信号
 478   3                              Doorstatus=1;//然后将门的状态置为高电平,门处于打开状态
 479   3                      }
 480   2                      if(Closedoor==0&&Doorstatus==1)
 481   2                      {
 482   3                              Door_close();
 483   3                              Signal=0x5f;
 484   3                              Doorstatus=0;
 485   3                      }
 486   2                      Delay(2);//延迟100ms
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 9   

 487   2              }
 488   1      }
 489          /*电梯门控制子程序*/
 490          void Door_control()
 491          {
 492   1              
 493   1              Door_open();//电梯门开启
 494   1              Doorstatus=1;
 495   1              Indoor_requst(50);//50*100ms=5s,设定5s开门时间电梯门自动关闭
 496   1              Door_close();//电梯门自动关闭
 497   1              Doorstatus=0;
 498   1              Indoor_requst(5);//给出5*100ms的时间乘客在这段时间内可以进行开门等其他操作
 499   1      }
 500          
 501          /*主机信号传递子程序*/
 502          void Zhu_requestsend()//主要作用是根据电梯的位置和运行方向生成相应的信号发送出去
 503          {
 504   1              if(Location==1)//电梯在1楼
 505   1              {
 506   2                      Zhusendarray[0]=Lampcontrolarray[0];
 507   2                      
 508   2                      Signal=Zhusendarray[0];
 509   2              }
 510   1              else if(Location==2&&Way==0)//二楼且上行
 511   1              {
 512   2                      Zhusendarray[0]=Lampcontrolarray[1];//Lampcontrolarray最高位表示电梯运行方向（0上行）次低四位表示楼层
 513   2                Signal=Zhusendarray[0];
 514   2              }
 515   1              else if(Location==3&&Way==0)//三楼上行
 516   1              {
 517   2                      Zhusendarray[0]=Lampcontrolarray[2];
 518   2                Signal=Zhusendarray[0];
 519   2              }
 520   1              else if(Location==4&&Way==0)
 521   1              {
 522   2                      Zhusendarray[0]=Lampcontrolarray[3];
 523   2                Signal=Zhusendarray[0];
 524   2              }
 525   1              else if(Location==5)
 526   1              {
 527   2                      Zhusendarray[0]=Lampcontrolarray[4];
 528   2                Signal=Zhusendarray[0];
 529   2              }
 530   1              else if(Location==4&&Way==4)
 531   1              {
 532   2                      Zhusendarray[0]=Lampcontrolarray[5];
 533   2                Signal=Zhusendarray[0];
 534   2              }
 535   1              else if(Location==3&&Way==4)//三楼上行
 536   1              {
 537   2                      Zhusendarray[0]=Lampcontrolarray[6];
 538   2                Signal=Zhusendarray[0];
 539   2              }
 540   1              else if(Location==2&&Way==4)//二楼且上行
 541   1              {
 542   2                      Zhusendarray[0]=Lampcontrolarray[7];//Lampcontrolarray最高位表示电梯运行方向（0上行）次低四位表示楼层
 543   2                Signal=Zhusendarray[0];
 544   2              }
 545   1      }
 546          /*用户请求信号接受子程序*/
 547          void Zhu_requestaccept1()//用户进入电梯后外呼内应都没有时
 548          {
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 10  

 549   1              while(1)
 550   1              {
 551   2                      Switch_judge();
 552   2                      Zhu_requestsend();//发送当前位置的请求信号
 553   2                      if((Signal<<4)^(Zhuacceptarray[0]<<4))
 554   2                      {
 555   3                              Zhuacceptarray[0]=Signal;
 556   3                              Judge();
 557   3                              if(Layer!=0)
 558   3                                      break;
 559   3                      }
 560   2              }
 561   1      }
 562                  
 563          
 564          void Zhu_requestaccept()
 565          {
 566   1              if((Signal<<4) ^ (Zhuacceptarray[0]<<4))//异或，不同为真，不同说明有新的信号需要接收
 567   1              {
 568   2                      if(Doorstatus==1) Door_close();
 569   2                      if((Signal<<4)^0x80) Zhuacceptarray[0]=Signal;
 570   2                      Judge();//判断下Way和Layer的值
 571   2                      if(Layer==0)//当电梯处于外呼楼层时直接开门
 572   2                      {
 573   3                              Door_control();
 574   3                              Zhu_requestaccept1();
 575   3                      }
 576   2                      else//当电梯不在外呼楼层时
 577   2                      {
 578   3                              Hoist();//电梯到达外呼楼层后再打开
 579   3                        Door_control();//控制电梯门开闭
 580   3                              Judge();//根据当下情况更新Layer和Way的值
 581   3                              Lamp_of_updown();//更新电梯上下行指示灯
 582   3                      }
 583   2              }
 584   1      }
 585          void Zhu_status()
 586          {
 587   1              Layer=0;
 588   1      }
 589          
 590          void main()
 591          {
 592   1              Seg=Floor_show[Location];//将当前楼层的显示信息赋值给寄存器Seg
 593   1              Up=0;
 594   1              Down=0;//先将上下行指示灯关闭
 595   1              Switch=1;
 596   1              Signal=0x0f;
 597   1              Motor=0xdd;
 598   1              beep=0;
 599   1              while(1)
 600   1              {
 601   2                      Switch_judge();//当电梯正常运转时跳出这个函数循环执行下面的程序
 602   2                      Zhu_requestaccept();//接受请求信号,然后根据信号来确定开门更新等操作
 603   2                      Indoor_requst(5);//内部请求，用于处理进入电梯后的各种情况
 604   2                      if(Layer!=0)//表示按下了某一按键
 605   2                      {
 606   3                              Hoist();//电梯运转
 607   3                              Door_control();//电梯门控制
 608   3                              Judge();////根据当下情况更新Layer和Way的值
 609   3                              Lamp_of_updown();//更新电梯上下行指示灯
 610   3                      }
C51 COMPILER V8.08   ZHU                                                                   06/23/2024 16:33:09 PAGE 11  

 611   2                      Zhu_requestsend();//发送当前位置的请求信号
 612   2              }
 613   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1520    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
